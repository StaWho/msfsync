# Create symlinks to eligible exploit-db scripts in metasploit modules

#Import os module
import os
from glob import glob
from pathlib import Path

# Ask the user to enter string to search
search_path = input("Enter directory path to search : ") # /usr/share/exploitdb/exploits
symlink_dir = input("Symlink destination : ") # ~/.msf4/modules/exploits
search_str = "require 'msf/core'"

# Default paths
if not search_path:
    search_path = '/usr/share/exploitdb/exploits/'
    print('Using default source path : ' + search_path)

if not symlink_dir:
    symlink_dir = os.path.join(str(Path.home()), '.msf4/modules/exploits/')
    print('Using default symlink path : ' + symlink_dir)

# Append a directory separator if not already present
if not (search_path.endswith("/") or search_path.endswith("\\") ): 
        search_path = search_path + "/"

if not (symlink_dir.endswith("/") or symlink_dir.endswith("\\") ): 
        symlink_dir = symlink_dir + "/"
                                                          
# Check paths
if not os.path.exists(search_path) or not os.path.exists(symlink_dir) :
        raise Exception('Invalid path')

input("Press Enter to continue...")

# Get all eligible files
file_list = [y for x in os.walk(search_path) for y in glob(os.path.join(x[0], '*.rb'))]
found_files = []
for file_name in file_list:
    fo = open(file_name)

    line = fo.readline()
    while line != '':
        if ( line.find(search_str) != -1):
            found_files.append(file_name)
            fo.close()
            break
        line = fo.readline()
    fo.close()

# Get unique source dirs
dst_file_list = { x.replace(search_path, '') for x in found_files }
dst_dir_list = { os.path.dirname(x) for x in dst_file_list}
unique_dirs = list(set(dst_dir_list))

# create target tree
for unique_dir in unique_dirs:
    os.makedirs(os.path.join(symlink_dir, unique_dir), exist_ok=True)

# Create symlink destinations
for src_file in found_files:
    dst_file = src_file.replace(search_path, symlink_dir)
    #print(src_file + ' ' + dst_file)
    try:
        os.symlink(src_file, dst_file)
        print('Added : ' + dst_file)
    except FileExistsError:
        print('Already exists : ' + dst_file)

print('Success')